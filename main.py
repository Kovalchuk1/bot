import telebot
import pandas as pd
from telebot import types
from io import BytesIO
import random
import time

bot = telebot.TeleBot('5994430411:AAEBf2QBrrgCylo4k6N7KWX-u48Wx7CDaGU', )
df = pd.DataFrame()
part_df = pd.DataFrame()
word = ''
options = []
value_mean = 4
a = 0
file_s = 0
test_df = pd.DataFrame({'word': ['apple', 'information', 'orange', 'home', 'program', 'sun'],
                        'translate': ['—è–±–ª—É–∫–æ', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', '–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π', '–±—É–¥–∏–Ω–æ–∫', '–ø—Ä–æ–≥—Ä–∞–º–∞', '—Å–æ–Ω—Ü–µ'],
                        'res': [0, 0, 0, 0, 0, 0],
                        'time_an': [0, 0, 0, 0, 0, 0],
                        'correct_an': [0, 0, 0, 0, 0, 0]})


def generate_question(dF):
    global word, options
    word = dF['word'].sample().values[0]
    if dF.shape[0] >=4:
        d = 3
    else:
        d = dF.shape[0] - 1
    options = dF.loc[dF['word'] != word, 'translate'].sample(n=d).tolist() + [dF.loc[dF['word'] == word, 'translate'].values[0]]
    print(options)
    random.shuffle(options)
    return word, options


def generate_question2():
    global word, options
    word = test_df[test_df['res'] == 0]['word'].sample().values[0]
    options = test_df.loc[test_df['word'] != word, 'translate'].sample(n=3).tolist() + [test_df.loc[test_df['word'] == word, 'translate'].values[0]]
    random.shuffle(options)
    return word, options

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü—Ä–∏–≤—ñ—Ç. –ü–µ—Ä–µ–π–¥–µ–º –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤—ñ—Ç. –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —É –≤–∏–≤—á–µ–Ω–Ω—ñ —Å–ª—ñ–≤!", reply_markup=markup)


@bot.message_handler(content_types=['document'])
def handle_file(message):
    global df
    first_file = pd.DataFrame()
    if file_s == 1:
        df = pd.DataFrame()
    elif file_s == 2:
        first_file = df
        df = pd.DataFrame()
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    if len(downloaded_file) == 0:
        bot.send_message(message.chat.id, "–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª.")
    else:
        with open("word", 'wb') as new_file:
            new_file.write(downloaded_file)
        df = pd.read_csv(BytesIO(downloaded_file))
        df.columns = ['word', 'translate']
        df['repit'] = 0
        df['count_errors'] = 0
        bot.send_message(message.chat.id, "–§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ, –º–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏.")
    if file_s == 2:
        df = pd.concat([first_file, df])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞')
    btn3 = types.KeyboardButton('–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞—Ç–∏—Å—å')
    markup.add(btn2, btn3)
    bot.send_message(message.from_user.id,
                     '–ú–æ–∂–µ–º–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è',
                     reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global options, word, start_time, end_time, a, value_mean, part_df, df, file_s
    if message.text == 'üëã –ü—Ä–∏–≤—ñ—Ç. –ü–µ—Ä–µ–π–¥–µ–º –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–ª—ñ–≤')
        btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞')
        btn3 = types.KeyboardButton('–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞—Ç–∏—Å—å')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, '–Ø–∫—â–æ —Ç–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª —Å–ª—ñ–≤, —è–∫—ñ —Ö–æ—á–µ—à –≤–∏–≤—á–∞—Ç–∏', reply_markup=markup)

    elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞':
        bot.send_message(message.from_user.id, '\xd0 –í—Å–µ –ø—Ä–æ—Å—Ç–æ, —è–∫—â–æ –±—É–¥–µ—à –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—å –º–æ—ó—Ö –ø—Ä–æ—Ö–∞–Ω—å:\n 1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–∞–º–µ, —è–∫–∏–π –≤–∫–∞–∑–∞–Ω–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è, —â–æ–± —è –º—ñ–≥ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —ñ–∑ –≤–∏–≤—á–µ–Ω–Ω—è–º\n 2. –¢–∏ –º–∞—î—à —Ä–æ–∑—É–º—ñ—Ç–∏,—â–æ —è —Ç—ñ–ª—å–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞—é –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è, —Ç–æ–º—É —Ü—å–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ, —â–æ–± –≤–æ–ª–æ–¥—ñ—Ç–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ –º–æ–≤–æ—é, —è–∫—É –≤–∏–≤—á–∞—î—à. \n 3. –Ø –∑–º–æ–∂—É –ø—Ä–∏–Ω–æ—Å–∏—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å—Ç—å, —è—â–∫–æ —Ç–∏ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏–º–µ—à –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –ø–æ 15-20 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –≤–∏–≤—á–µ–Ω–Ω—è.' , parse_mode='Markdown')

    elif message.text == '–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞—Ç–∏—Å—å':
        if value_mean == 0:
            bot.send_message(message.chat.id, f"–î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º–æ –ø—Ä–æ–±–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–≤–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è!")
            word, options = generate_question2()
            test_df.loc[test_df['word'] == word, 'res'] = 1
            a = 1
            markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
            for option in options:
                markup.add(telebot.types.KeyboardButton(option))
            start_time = time.perf_counter()
            bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)

        if df.empty:
            bot.send_message(message.chat.id, "–í–∏ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Ñ–∞–π–ª —Å–ª—ñ–≤ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–æ —Ñ–∞–π–ª.")
        else:
            if value_mean != 0:
                if part_df.empty:
                    if df.shape[0] <= 5:
                        part_df = df[['word', 'translate']]
                    else:
                        part_df = df.loc[df['repit'] == 0, ['word', 'translate']].sample(n=5)
                    for index, row in part_df.iterrows():
                        word = row['word']
                        translate = row['translate']
                        mask = (df['word'] == word) & (df['translate'] == translate)
                        df.loc[mask, 'repit'] = 1

                    part_df['rating'] = 2
                    part_df['repit'] = 0
                    part_df['count_errors'] = 0

                word, options = generate_question(part_df)

                markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
                for option in options:
                    markup.add(telebot.types.KeyboardButton(option))
                start_time = time.perf_counter()
                bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)

    elif message.text in options:
        if a == 1:
            df2 = test_df
        else:
            df2 = part_df

        answer = message.text
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        correct_answer = df2.loc[df2['word'] == word, 'translate'].values[0]
        if answer == correct_answer:
            if a == 1:
                test_df.loc[test_df['word'] == word, 'correct_an'] = 1
                test_df.loc[test_df['word'] == word, 'time_an'] = execution_time
            if a == 0:

                s = 0
                if execution_time < value_mean: s += 0.5
                else: s += -0.5

                part_df.loc[part_df['word'] == word, 'rating'] = part_df.loc[part_df['word'] == word, 'rating'] - 1 - s

            bot.reply_to(message, '–í—ñ—Ä–Ω–æ!')
            bot.send_animation(message.chat.id, 'https://media.tenor.com/5lLcKZgmIhgAAAAC/american-psycho-patrick-bateman.gif')
        else:
            if a == 0:
              s = 0
              if execution_time < value_mean: s -= 0.5
              else: s += 0.5
              part_df.loc[part_df['word'] == word, 'rating'] = part_df.loc[part_df['word'] == word, 'rating'] + 3 + s
              part_df.loc[part_df['word'] == word, 'count_errors'] += 1
            bot.reply_to(message, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: {correct_answer}.')
            bot.send_animation(message.chat.id, 'https://media.tenor.com/upPmgF2cbWQAAAAd/american-psycho-joker.gif')

        #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –µ–ª –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º 0, —è–∫—â–æ —Ç–∞–∫ —Å–ª–æ–≤–æ –≤–∏–≤—á–µ–Ω–µ —ñ –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ —ñ–Ω—à–µ —ñ–∑ df
        if a == 0:
            if (part_df['rating'] <= 0).sum() > 0:
                filtered_part_df = part_df[part_df['rating'] <= 0]
                merged_df = df.merge(filtered_part_df[['word', 'translate', 'count_errors']], on=['word', 'translate'], how='left')
                merged_df['count_errors'] = merged_df['count_errors_y'].fillna(merged_df['count_errors_x'])
                merged_df = merged_df.drop(columns=['count_errors_x', 'count_errors_y'])

                df = merged_df
                part_df = part_df[part_df['rating'] > 0]
                if (df['repit'] == 0).count() > 0:
                    mask2 = df['repit'] == 0
                    new_rows = df.loc[mask2, ['word', 'translate']]
                    n_rows_to_add = min(5 - len(part_df), len(new_rows))

                    if n_rows_to_add > 0:
                        new_rows_to_add = new_rows.head(n_rows_to_add).copy()
                        new_rows_to_add['rating'] = 2
                        new_rows_to_add['repit'] = 0
                        new_rows_to_add['count_errors'] = 0
                        part_df = pd.concat([part_df, new_rows_to_add])
                        df.loc[new_rows_to_add.index, 'repit'] = 1
                print(df)
                print(part_df)
            if part_df.shape[0] == 0 and (df['repit'] == 0).sum() == 0:

                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn1 = types.KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–∏–π —Ñ–∞–π–ª —Å–ª—ñ–≤')
                    btn12 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ –Ω–∞—è–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É')
                    btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞')
                    btn3 = types.KeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –¥–ª—è –º–µ–Ω–µ —Å–ª–æ–≤–∞')

                    markup.add(btn1, btn12, btn2, btn3)
                    bot.reply_to(message,
                                 '–ó–¥–∞—î—Ç—å—Å—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —É–∂–µ –∑–∞—Å–≤–æ—î–Ω—ñ —Ç–æ–±–æ—é. –ê–ª–µ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∑–∞—Å–≤–æ—î–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—é –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à—ñ –¥–ª—è —Ç–µ–±–µ —Å–ª–æ–≤–∞ –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤)', reply_markup=markup)
        if a == 1:
            if df2[df2['res'] == 0]['res'].count() != 0:

                word, options = generate_question2()
                test_df.loc[test_df['word'] == word, 'res'] = 1
                markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
                for option in options:
                    markup.add(telebot.types.KeyboardButton(option))
                start_time = time.perf_counter()
                bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)

            else:

                if a == 1:
                    print(test_df)
                    avg = test_df[test_df['correct_an'] == 1]['time_an'].mean()
                    value_mean = test_df[test_df['correct_an'] == 1]['time_an'].std() + avg
                a = 0
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–ª—ñ–≤')
                btn2 = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞')
                btn3 = types.KeyboardButton('–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞—Ç–∏—Å—å')
                markup.add(btn1, btn2, btn3)
                bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–æ–≥–æ', reply_markup=markup)
        else:
            if value_mean != 0 and (df['repit'] == 0).sum() != 0:
                if part_df.empty:
                    if df.shape[0] <= 5:
                        part_df = part_df = df[['word', 'translate']]
                    else:
                        part_df = df.loc[df['repit'] == 0]['word', 'translate'].sample(n=5)

                    for index, row in part_df.iterrows():
                        word = row['word']
                        translate = row['translate']
                        mask = (df['word'] == word) & (df['translate'] == translate)
                        df.loc[mask, 'repit'] = 1

                    part_df['rating'] = 2
                    part_df['repit'] = 0
                    part_df['count_errors'] = 0

                word, options = generate_question(part_df)
                print(word, options)
                markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
                for option in options:
                    markup.add(telebot.types.KeyboardButton(option))
                start_time = time.perf_counter()
                bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)
            if value_mean != 0 and (df['repit'] == 0).sum() == 0 and part_df.shape[0] != 0:
                word, options = generate_question(part_df)
                print(word, options)
                markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
                for option in options:
                    markup.add(telebot.types.KeyboardButton(option))
                start_time = time.perf_counter()
                bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)

    elif message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–ª—ñ–≤' or message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–∏–π —Ñ–∞–π–ª —Å–ª—ñ–≤':
        file_s = 1
        bot.send_message(message.from_user.id, '–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–∞–π–ª  .csv –∞–±–æ .txt —ñ–∑ —Å–ª–æ–≤–∞–º–∏, —è–∫—ñ —Ö–æ—á–µ—à –≤–∏–≤—á–∞—Ç–∏.–£ —è–∫–æ–º—É –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Ü–µ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ - word,translate. –Ü —É –∫–æ–∂–Ω–æ–º—É –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É –º–∞—î –±—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: \nword,translate\n hello,–ø—Ä–∏–≤—ñ—Ç\n Ukraine,–£–∫—Ä–∞—ó–Ω–∞ ', parse_mode='Markdown')
    elif message.text == '–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ –Ω–∞—è–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É' :
        file_s = 2
        bot.send_message(message.from_user.id, '–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–∞–π–ª  .csv –∞–±–æ .txt —ñ–∑ —Å–ª–æ–≤–∞–º–∏, —è–∫—ñ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω–∞—è–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏—á–µ–Ω–Ω—è.–£ —è–∫–æ–º—É –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Ü–µ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ - word,translate. –Ü —É –∫–æ–∂–Ω–æ–º—É –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É –º–∞—î –±—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: \nword,translate\n hello,–ø—Ä–∏–≤—ñ—Ç\n Ukraine,–£–∫—Ä–∞—ó–Ω–∞ ', parse_mode='Markdown')
    elif message.text == '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –¥–ª—è –º–µ–Ω–µ —Å–ª–æ–≤–∞':
        df.loc[df['count_errors'] > (df['repit'].mean() - df['repit'].std()), 'repit'] = 0
        part_df = pd.DataFrame()
        if df.loc[df['repit'] == 0].shape[0] <= 5:
            part_df = df.loc[df['repit'] == 0][['word', 'translate']].sample(n=df.loc[df['repit'] == 0].shape[0])
        else:
            part_df = df.loc[df['repit'] == 0]['word', 'translate'].sample(n=5)
        for index, row in part_df.iterrows():
            word = row['word']
            translate = row['translate']
            mask = (df['word'] == word) & (df['translate'] == translate)
            df.loc[mask, 'repit'] = 1
        part_df['rating'] = 2
        part_df['repit'] = 0
        part_df['count_errors'] = 0

        word, options = generate_question(part_df)
        print(word, options)
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
        for option in options:
            markup.add(telebot.types.KeyboardButton(option))
        start_time = time.perf_counter()
        bot.send_message(message.chat.id, f"–Ø–∫–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞ '{word}'?", reply_markup=markup)


bot.polling(none_stop=True, interval=0)